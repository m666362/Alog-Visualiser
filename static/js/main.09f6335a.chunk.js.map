{"version":3,"sources":["store/useTrackedStore.js","components/BarChart.js","components/FormComponents/Form.js","components/BubbleSort.js","App.js","index.js"],"names":["setAutoFreeze","config","useStore","create","set","get","api","args","log","labels","setLabels","state","data","backgroundColors","borderColors","setData","setSort","array","console","fn","produce","useTrackedStore","createTrackedSelector","defaults","global","tooltips","enabled","legend","position","BarChart","datasets","backgroundColor","borderColor","borderWidth","height","width","options","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","fontSize","Form","props","useForm","defaultValues","dataValue","handleSubmit","control","getRandomInt","max","Math","floor","random","getColor","rgba","reset","onSubmit","split","i","push","name","render","field","TextField","id","type","InputLabelProps","shrink","BubbleSort","swap","left","right","temp","onClick","JSON","stringify","length","j","parseInt","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09f6335a.chunk.js","sourcesContent":["import { produce, setAutoFreeze } from \"immer\";\r\nimport create from \"zustand\";\r\nimport { createTrackedSelector } from \"react-tracked\";\r\n\r\nsetAutoFreeze(false);\r\n\r\nexport const immer = (config) => (set, get) =>\r\n    config((fn) => set(produce(fn)), get);\r\n\r\nconst log = (config) => (set, get, api) =>\r\n    config(\r\n        (args) => {\r\n            set(args);\r\n        },\r\n        get,\r\n        api\r\n    );\r\n\r\nconst store = (set) => ({\r\n    labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\r\n    setLabels: (labels) => set((state) => {\r\n        state.labels = labels\r\n    }),\r\n    data: [12, 19, 14, 5, 2, 12],\r\n    backgroundColors: [\r\n        `rgba(255, 99, 132, 0.2)`,\r\n        'rgba(54, 162, 235, 0.2)',\r\n        'rgba(255, 206, 86, 0.2)',\r\n        'rgba(75, 192, 192, 0.2)',\r\n        'rgba(153, 102, 255, 0.2)',\r\n        'rgba(255, 159, 64, 0.2)',\r\n    ],\r\n    borderColors: [\r\n        'rgba(255, 99, 132, 1)',\r\n        'rgba(54, 162, 235, 1)',\r\n        'rgba(255, 206, 86, 1)',\r\n        'rgba(75, 192, 192, 1)',\r\n        'rgba(153, 102, 255, 1)',\r\n        'rgba(255, 159, 64, 1)',\r\n    ],\r\n    setData: (data, backgroundColors, borderColors) => set((state) => {\r\n        // console.log({array});\r\n        state.data = [...data];\r\n        state.labels = data;\r\n        state.backgroundColors = [...backgroundColors];\r\n        state.borderColors = [...borderColors];\r\n    }),\r\n    setSort: (array) => set((state) => {\r\n        console.log({array});\r\n        state.data = [...array];\r\n        state.labels = [...array];\r\n    }),\r\n});\r\n\r\nconst useStore = create(log(immer(store)));\r\nconst useTrackedStore = createTrackedSelector(useStore);\r\nexport default useTrackedStore;","import React from 'react'\r\nimport { Pie, defaults, Bar } from 'react-chartjs-2'\r\nimport useTrackedStore from '../store/useTrackedStore'\r\n\r\n\r\ndefaults.global.tooltips.enabled = false\r\ndefaults.global.legend.position = 'bottom'\r\n\r\nconst BarChart = () => {\r\n  const state = useTrackedStore()\r\n  return (\r\n    <div>\r\n      <Bar\r\n        data={{\r\n          labels: state.labels,\r\n          datasets: [\r\n            {\r\n              // label: 'Color of world',\r\n              data: state.data,\r\n              backgroundColor: state.backgroundColors,\r\n              borderColor: state.borderColors,\r\n              borderWidth: 1,\r\n            },\r\n            // {\r\n            //   label: 'Quantity',\r\n            //   data: [47, 52, 67, 58, 9, 50],\r\n            //   backgroundColor: 'orange',\r\n            //   borderColor: 'red',\r\n            // },\r\n          ],\r\n        }}\r\n        height={400}\r\n        width={600}\r\n        options={{\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            yAxes: [\r\n              {\r\n                ticks: {\r\n                  beginAtZero: true,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n          legend: {\r\n            labels: {\r\n              fontSize: 25,\r\n            },\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BarChart\r\n","import React from 'react';\r\n\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport TextField from '@mui/material/TextField';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport useTrackedStore from '../../store/useTrackedStore';\r\n\r\n\r\n\r\nfunction Form(props) {\r\n    const state = useTrackedStore()\r\n    const { handleSubmit, control, reset } = useForm({\r\n        defaultValues: {\r\n            dataValue: [],\r\n        }\r\n    });\r\n\r\n    function getRandomInt(max) {\r\n        return Math.floor(Math.random() * max);\r\n    }\r\n\r\n    function getColor() {\r\n        let rgba = `rgba(${getRandomInt(255)}, ${getRandomInt(255)}, ${getRandomInt(255)}`\r\n        return {\r\n            backgroundColor: `${rgba}, 0.2)`,\r\n            borderColor: `${rgba}, 1)`,\r\n        };\r\n    }\r\n\r\n    const onSubmit = data => {\r\n        console.log(data.dataValue.split(\",\"));\r\n        let dataValue = [], backgroundColors = [], borderColors=[];\r\n        for (let i = 0; i < data.dataValue; i++) {\r\n            dataValue.push(getRandomInt(100));\r\n            const {backgroundColor, borderColor} = getColor();\r\n            backgroundColors.push(backgroundColor);\r\n            borderColors.push(borderColor)\r\n        }\r\n        state.setData(dataValue, backgroundColors, borderColors)\r\n    };\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <Controller\r\n                name=\"dataValue\"\r\n                control={control}\r\n                // rules={{ required: true }}\r\n                render={({ field }) => <TextField\r\n                    id=\"outlined-number\"\r\n                    type=\"number\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    {...field} />}\r\n            />\r\n            {/* <Controller\r\n                name=\"checkbox\"\r\n                control={control}\r\n                rules={{ required: true }}\r\n                render={({ field }) => <Checkbox {...field} />}\r\n            /> */}\r\n\r\n            <input type=\"submit\" />\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport useTrackedStore from '../store/useTrackedStore';\r\n\r\nfunction BubbleSort(props) {\r\n    const state = useTrackedStore();\r\n    function swap(array, left, right) {\r\n        let temp = array[left];\r\n        array[left] = array[right];\r\n        array[right] = temp;\r\n        return array;\r\n    }\r\n    return (\r\n        <div>\r\n            <button onClick={() => {\r\n                let array = state.data;\r\n                let backgroundColors = state.backgroundColors;\r\n                let borderColors = state.borderColors;\r\n                console.log({ array: JSON.stringify(array) });\r\n                for (let i = array.length - 2; i >= 0; i--) {\r\n                    // setTimeout(() => {\r\n                        \r\n                    // }, 0);\r\n\r\n                    for (let j = 0; j <= i; j++) {\r\n                        if (parseInt(array[j]) > parseInt(array[j + 1])) {\r\n                            array = swap(array, j, j+1)\r\n                            backgroundColors = swap(backgroundColors, j, j+1)\r\n                            borderColors = swap(borderColors, j, j+1)\r\n                            // let temp = array[j];\r\n                            // array[j] = array[j + 1];\r\n                            // array[j + 1] = temp;\r\n                            // state.setSort(array);\r\n                        }\r\n                    }\r\n                    \r\n                    state.setData([...array], [...backgroundColors], [...borderColors]);\r\n\r\n                }\r\n                console.log({ array: JSON.stringify(array) });\r\n            }}>Bubble Sort</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BubbleSort;","import React from 'react'\r\n\r\nimport BarChart from './components/BarChart'\r\nimport './App.css'\r\nimport Form from './components/FormComponents/Form'\r\nimport BubbleSort from './components/BubbleSort'\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <BarChart />\r\n      <Form/>\r\n      <BubbleSort/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}